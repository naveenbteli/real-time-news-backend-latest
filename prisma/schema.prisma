generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  role        UserRole     @default(USER) // USER or PUBLISHER
  createdAt   DateTime     @default(now())

  // Relationships
  articles     Article[]
  subscriptions Subscription[]
  likes         Like[]
  comments      Comment[]
}

model Topic {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  createdAt DateTime      @default(now())

  // Relationships
  subscriptions Subscription[]
  articles      ArticleTopic[]
}

model Article {
  id          Int           @id @default(autoincrement())
  title       String
  content     String
  sentiment   String?
  fakeFlag    Boolean        @default(false)
  createdAt   DateTime       @default(now())

  // Foreign Key - Publisher
  publisher   User           @relation(fields: [publisherId], references: [id])
  publisherId Int

  // Relationships
  topics       ArticleTopic[]
  likes        Like[]
  comments     Comment[]
}

model ArticleTopic {
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int

  topic     Topic   @relation(fields: [topicId], references: [id])
  topicId   Int

  @@id([articleId, topicId]) // Composite primary key
}

model Subscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Foreign Keys
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   Int

  @@unique([userId, topicId]) // one subscription per user per topic
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Foreign Keys
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int

  @@unique([userId, articleId]) // one like per user per article
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())

  // Foreign Keys
  article   Article   @relation(fields: [articleId], references: [id])
  articleId Int

  user      User      @relation(fields: [userId], references: [id])
  userId    Int

  // Self-referencing for nested comments
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  Int?
  replies   Comment[] @relation("CommentReplies")
}

enum UserRole {
  USER
  PUBLISHER
}
